@page
<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="~/lib/bootstrap/dist/css/bootstrap.css" />
</head>
<body>
    <h2>万紫千红</h2>
    <span class="glyphicon glyphicon-heart"></span>

</body>
</html>
<script>
    'use strict';

    ////参考求助首页侧边栏关键字，实现：当鼠标移动到关键字上，显示关键字被使用次数

    //var num = document.getElementById('KeyWord').getElementsByTagName('a');

    //for (let i = 0; i < btns.length; i++) {

    //    num[i].onmouseover = function () {
    //        console.log('该关键字被使用' + num[i].getAttribute('data-used') + '次。');
    //    }
    //}


    //参考文章的全系列阅读功能，当滚动到页面底部时，将页面现有内容粘贴到页面底部，
    //直到5次过后，在页面底部显示：已经没有更多内容了


    ////参考消息页面：完成勾选全选功能
    //for (var i = 0; i < document.getElementsByClassName('col-xs-2 col-sm-1'); i++) {

    //    if (typeof document.getElementsByClassName('col-xs-2 col-sm-1')[i].children[0].checked === "boolean") {
    //        if (document.getElementsByTagName('input')[0].checked === true) {
    //            document.getElementsByClassName('col-xs-2 col-sm-1')[i].children[0].checked === true;
    //        } else {
    //            document.getElementsByClassName('col-xs-2 col-sm-1')[i].children[0].checked === false;
    //        }

    //    }
    //}

    ////参考注册页面：

    ////提交时，如果用户名重复（已有用户名用数组保存），阻止form提交，提示“用户名重复”。
    ////重新输入用户名，一旦输入用户名部分没有重复
    ////当用户名或密码等有值时，关闭页面前弹出确认框
    //var hasarr = [];
    //if (document.getElementsByTagName('input')[1].value in hasarr) {
    //    document.getElementsByTagName('input')[6].checked = false;
    //    alert('用户名重复');
    //} else { document.getElementsByTagName('input')[6].checked = true; }



    ////参考求助首页侧边栏“免费广告发布”弹出Modal，实现（不需要弹出Modal）：



    ////根据下拉列表选中项，填充“文字内容”和“链接”文本框
    ////勾选修改的checkbox，实现“文字内容”和“链接”文本框的禁用和启用
    ////参考发布求助，实现其关键字功能：
    //document.getElementsByTagName('select')[0].selectedIndex

    //if (document.getElementById('Content_Edit').checked === true) {
    //    document.getElementsByClassName('form-control')[2].readOnly === true;
    //    document.getElementsByClassName('form-control')[3].readOnly === true;
    //}else {
    //    document.getElementsByClassName('form-control')[2].readOnly === false;
    //    document.getElementsByClassName('form-control')[3].readOnly === false;
    //}


    //没有选择一级关键字，不能选择二级关键字
    //选择一级关键字后，二级关键字只能是一级关键字下的子集
    //一级关键字和二级关键字被选中后，会显示在下拉列表上方
    //自定义关键字输入完成后（按空格键），输入的关键字显示在下拉列表上方
    //后输入的关键字显示在前面
    //function firstfloor(first) {
    //    var first =
    //        document.getElementsByName('select')[0].selectedIndex
    //    function secondfloor(second) {
    //        document.getElementsByName('select')[1].selectedIndex
    //    }
    //    secondfloor();
    //}
    //firstfloor();




    ////实现铃铛（没有学bootstrap的同学用文字代替）闪烁效果
    function lightstar() {
        if (document.getElementsByTagName('span')[0].style.color === 'darkblue') {
            document.getElementsByTagName('span')[0].style.color = 'lightblue';
        } else if (document.getElementsByTagName('span')[0].style.color === 'lightblue') {
            document.getElementsByTagName('span')[0].style.color = 'darkblue';
        }
    }
    setInterval(lightstar, 1000);



    //模拟求助首页，并：


    ////统计有多少个悬赏大于1的求助

    //var result = document.getElementsByClassName('visible-sm-inline visible-md-inline visible-lg-inline');
    //for (var i = 0; i < result.length; i++) {

    //    if (result[i].innerText === "悬赏：") {
    //        var num = 0;
    //        if (result[i].parentNode.nextSibling.nextSibling.innerText > 1) {
    //            num++;
    //            console.log('悬赏大于1的求助共有' + num + '个。')
    //        }

    //    }
    //}





    ////将状态为“协助中”的求助背景改成灰黑色
    (function() {
        for (var i = 0; i < document.getElementsByClassName('problem-status label-info').length; i++) {

            if (document.getElementsByClassName('problem-status label-info')[i].innerText === '协助中') {
                document.getElementsByClassName('problem-status label-info')[i].
                    parentNode.parentNode.parentNode.style.backgroundcolor = 'darkblack';
            }
        }
    })();


    //写一个函数，可以统计某个求助使用了多少关键字
    if (typeof document.getElementsByClassName('fa fa-tags ')[i].getElementsByTagName('a')[0].innerText === "string") {
        document.getElementsByClassName('badge badge-has-used')[0].parentNode
    }



    //如果总结数为0，将其从DOM树中删除



    ////参考用户注册页面，创建一下函数：
    ////显示密码的长度
    ////如果密码和确认密码不一致，弹出提示
    //(function() {
    //    document.getElementsByTagName('input')[4].value.length;

    //    if (document.getElementsByTagName('input')[3].value !== document.getElementsByTagName('input')[4].value) {
    //        alert('两次密码不一致')
    //    }
    //    else {
    //    alert( '登录成功') }
    //})();



    ////参考用户资料页面，控制台显示出用户的：性别 / 出生年月 / 关注（关键字）/ 自我介绍
    //document.getElementsByTagName('input')[2].checked === true;
    //document.getElementsByTagName('select')[0].children[20];
    //document.getElementsByTagName('select')[1].children[2];
    //document.getElementsByTagName('select')[2].children[5];
    //document.getElementsByTagName('textArea')[0].value === '我是两开花';





    //function greet() {
    //    alert('hello,源栈');
    //}
    //setTimeout(greet, 3000);
    //function closureRiddle() {
    //    var arr = [];
    //    for (var i = 0; i < 5; i++) {
    //        arr[i] = function () {     //数组的元素为i个函数，不会进方法内,i=4加1成5后跳到15步
    //            return i;
    //        };
    //    }
    //    return arr;
    //}
    //var results = closureRiddle();       //执行，调用第5步函数
    //for (var i = 0; i < results.length; i++) {
    //    console.log(`第${results[i]()}次显示`);
    //}



    //function luckyStack() {
    //var _price = 986;
    //    return function () {
    //        return _price;
    //    }
    //}
    //var getPrice = luckyStack();
    //alert(`"源栈"培训的价格是每周${getPrice()}元！`);




    ////模拟名称空间：随着JavaScript规模扩大，一个项目可能引用多个类库，这样可以避免名称冲突
    //var yz = {};
    //yz.cq = {};
    //yz.cq.base = {
    //    name='源栈重庆总部'
    //};
    //alert(yz.cq.base.name);




    //function blockScope() {
    //    if (true) {
    //        let  i = 986;
    //        i = 100;

    //    }
    //    console.log('i=' + i);
    //    //let具有块级作用域
    //    //变量作用于整个函数，即if(true) {
    //    //    var i = 986;
    //    //}
    //    //console.log('i=' + i); 而不是块级作用域{
    //    //    var i = 986;
    //    //}
    //}
    //blockScope();

    //var name = "飞哥";
    //function smart() {
    //    //var name = '子祥';
    //    alert(`${name}最帅`);
    //}
    ////smart();

    //function reallySmart() {


    //    smart();
    //    name = '子祥';
    //}
    //reallySmart();


    //function a(name) {
    //    var age = 50;
    //    //var name = '两开花';
    //    function b() {
    //        name = '老程';
    //        gender = true;
    //        alert(name+age+gender);

    //    };

    //    b();
    //    age = 200;
    //    alert(gender);

    //}

    //a('飞哥');




    ////使用setTimeout() （不是setInterval() ）实现每隔1秒钟依次显示：第n周，源栈同学random人。（n逐次递增，random随机）
    //function stack() {
    //    let n = 1;
    //    function luckyStack() {

    //        let num = Math.floor(100 * Math.random());
    //        console.log(`第${n}周，源栈同学${num}人`);
    //        setTimeout(luckyStack, 1000);
    //        n++;
    //    }

    //    luckyStack();
    //}
    //stack();



        ////完成猜数字的游戏：
        ////弹出游戏玩法说明，等待用户点击“确认”，开始游戏；
        ////浏览器生成一个不大于1000的随机正整数；
        ////用户输入猜测；
        ////如果用户没有猜对，浏览器比较后告知结果：“大了”或者“小了”。如果用户：
        ////只用了不到6次就猜到，弹出：碉堡了！
        ////只用了不到8次就猜到，弹出：666！
        ////用了8 - 10次猜到，弹出：猜到了。
        ////用了10次都还没猜对，弹出：^ (*￣(oo) ￣)^
        //var num = Math.floor(1000 * Math.random());
        //confirm('你准备好了吗？');
        //var guess = prompt('请输入一个不大于1000的正整数');
        //for (var i = 1; i < 11; i++) {

        //    if (guess > num) {
        //        alert('大了');
        //        guess = prompt('请输入一个不大于1000的正整数');
        //    } else if (guess < num) {
        //        alert('小了');
        //        guess = prompt('请输入一个不大于1000的正整数');
        //    }

        //    else {
        //        if (i < 6) { alert('碉堡了！'); }
        //        else if (6 <= i < 8) { alert('666!'); }
        //        else if (8 <= i < 10) { alert('猜到了'); }
        //        else { alert('^ (*￣(oo) ￣)^'); }
        //    }

        //}



    ////用JavaScript弹出你的入栈口号
    //alert("年薪百万不是梦")


    ////利用JavaScript计算出：[(23 + 7)x12 - 8]÷6的值
    //var num = ((23 + 7) * 12 - 8) / 6;
    //alert(num)


    ////利用循环，计算出1 + 3 + 5 + 7 +...+99=?
    //var num = 0;
    //for (var i = 1; i < 100; i += 2) {
    //    num += i;
    //}
    //console.log(num)


    ////将源栈同学姓名 / 昵称装入数组，再根据该数组输出共有多少同学
    //var arr = ["芦苇", "老赵", "老程", "子祥", "文轩", "两开花", "彩玲", "明辉", "四喜丸子"];
    //alert(`源栈学生总共 ${arr.length}人。`);

    ////在上述数组头部加上小鱼老师，末尾加上大飞哥
    //arr.push("大飞哥");
    //arr.unshift("小雨老师");
    //alert(arr);


    ////如果一个数只能被1和它自己整除，这个数就被称之为“素数”。请找出100以内的所有素数。
    ////然后封装成一个函数findPrime(max) ，可以返回max以内的所有素数。
    //function findPrime(max) {
    //    var prime = [];
    //    for (var i = 1; i < max; i++) {
    //        if (isPrime(i)) {
    //            prime.push(i);
    //        }

    //    }
    //    return prime;
    //}
    //    function isPrime(num){
    //    var mpf = Math.floor(Math.sqrt(i)) + 1;
    //    for (var j = 2; j < mpf; j++) {
    //        if (i % j === 0) {
    //            return false;
    //        }
    //    }
    //}
    //alert(findPrime(max));

    ////建立一个函数getMaxNumber() ，可以接受任意多各种类型（整数、小数、正数、负数、字符串、布尔值等）的参数，并找出里面最大的数（忽略其他类型）

    //function getMaxNumber() {
    //    var num;
    //    for (let i = 0; i < arguments.length; i++) {
    //        if (typeof arguments[i] === 'number') {
    //            if (arguments[i + 1] > arguments[i]) {
    //                num = arguments[i + 1];
    //            }
    //        }
    //    }
    //    alert('最大值为'+num)
    //}
    //getMaxNumber(3, '3', 3, -4, 9.6, '两开花', 'BC',true, null, undefined, NaN);


    ////删除一个数组里面重复的元素
    //var arr = [3, '3', 3, -4, 9.6, '两开花', 'BC', true, null, undefined, NaN];



    ////使用JavaScript内置字符串函数，处理 “‘源栈’：飞哥小班教学，线下免费收看” ：“飞哥”改成“大神”，“线下”改成“线上”。
    //var luckyStack = '飞哥小班教学，线下免费收看';

    //luckyStack = luckyStack.replace('飞哥小班教学，线下免费收看', '大神小班教学，线上免费收看');
    //alert(luckyStack);



    ////将数组['why', 'gIT', 'vs2019', 'community', 'VERSION']规范化，所有字符串：
    ////首字母大写开头，其他字母小写
    ////截去超过6个字符的部分，如'community'将变成'Commun'
    //var arr = ['why', 'gIT', 'vs2019', 'community', 'VERSION'];
    //for (var i = 0; i < arr.length; i++) {
    //    arr[i] = arr[i].toLowerCase();
    //    arr[i] = arr[i][0].toUpperCase() + arr[i].substring(1);
    //    arr[i] = arr[i].substring(0, 6);

    //}
    //alert(arr);


    ////创建一个函数getRandomArray(length, max) ，能返回一个长度不大于length，每个元素值不大于100随机整数数组。
    //function getRandomArray(length) {
    //    var arr = [];
    //    for (var i = 0; i < length; i++) {
    //       a=arr.push[Math.floor(100 * Math.random())];
    //    }
    //    return a;
    //}


    //不使用JavaScript内置函数，将一个字符串顺序颠倒，比如：'hello,yuanzhan' 变成 'nahznauy,olleh'。
    //var text = 'hello,yuanzhan';
    //var newtext = 'hello,yuanzhan';
    //for (var i = 0; i < text.length; i++) {

    //  newtext[i] = text[text.length-1 - i];
    //}
    //alert(newtext[i]);



    //document.write(str + '<br />');
    //document.write(usernameMi + '<br />');



    //统计出这段文字中有多少个单词：
    //There are two ways to create a RegExp object: a literal notation and a constructor.
    //To indicate strings, the parameters to the literal notation do not use quotation marks
    //while the parameters to the constructor function do use quotation - marks.So the following
    //expressions create the same regular expression

    //var username = "There are two ways to create a RegExp object : a literal notation and a constructor. To indicate strings , the parameters to the literal notation do not use quotation marks while the parameters to the constructor function do use quotation-marks. So the following expressions create the same regular expression";
    //for (var i = username.length - 1; i >= 0; i--) {
    //    var str = username.charAt(i);
    //    var code = str.charCodeAt();
    //    usernameMi += code;
    //}
    ////编写一个计算源栈返还红包金额的函数 Redbag() ，参考：





    ////在函数yz.fei.get986()中嵌入不带参数的函数has9()/has8()/has6()，
    ////并调用上述函数，找出10000以内有多少个数字包含：9或者8或者6。
    //var yz = {};
    //yz.fg = {};
    //yz.fg.get986 = function () {
    //    var i = 0, j = 0;
    //    function has9() {
    //        if (i.tostring().indexOf(9) !== -1) {
    //            return true;
    //        } else {
    //          function  has8() {
    //                if (i.tostring().indexOf(8) !== -1) {
    //                    return true;
    //                } else {
    //                  function  has6(){
    //                        if (i.tostring().indexOf(6) !== -1) {
    //                            return true;
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //        for (var i = 0; i < max; i++) {
    //            if (has8() || has9() || has6())
    //                j += 1;
    //        }
    //        return j;
    //    }
    //    alert(yz.fg.get986(100));


    ////    在函数student()中声明了函数域变量name、age和female，使用闭包机制，将其暴露到函数外部
    //function students() {
    //    var name = '两开花', age = 18, female = true;
    //    var arr = [name, age, female];
    //    return function () {
    //        return arr;
    //    }
    //}
    //var long = students()();
    //for (var i = 0; i < long.length; i++) {
    //    console.log(long[i]());
    //}

    ////    解释以下代码运行结果：
        //function foo(x) {
        //    var tmp = 3;
        //    return function (y) {
        //        x = x ? x + 1 : 1;
        //        console.log(x + y + tmp);
        //    }
        //}

        //var bar = foo(-1);
        ////或者：var bar = foo(1);
        ////或者：var bar = foo(0);

        //bar(10);


        ////改动以下代码，让其输出如图所示，并说明理由。
        //        function buildList(list) {
        //            var result = [];
        //            for (let i = 0; i < list.length; i++) {
        //            result.push(function () {
        //                console.log('item' + i + ': ' + list[i])
        //            });
        //        }
        //        return result;
        //    }

        //        (function() {
        //            var fnlist = buildList([1, 2, 3]);
        //            for (var j = 0; j < fnlist.length; j++) {
        //            fnlist[j]();
        //            }
        //    })();
</script>
